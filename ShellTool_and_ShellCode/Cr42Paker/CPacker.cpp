#include "pch.h"
#include "CPacker.h"
#include <compressapi.h>

#pragma comment(lib, "Cabinet.lib")

void CPacker::GetNewPeHdr()
{
    //拷贝原PE的PE头
    m_dwNewPeHdrSize = m_pNtHdr->OptionalHeader.SizeOfHeaders;
    m_pNewPeHdr = new BYTE[m_dwNewPeHdrSize];
    CopyMemory(m_pNewPeHdr, m_pDosHdr, m_dwNewPeHdrSize);

    //修改
    auto pDosHdr = (PIMAGE_DOS_HEADER)m_pNewPeHdr;
    auto pNtHdr = (PIMAGE_NT_HEADERS)(m_pNewPeHdr + pDosHdr->e_lfanew);
    auto pSecHdr = (PIMAGE_SECTION_HEADER)
        ((LPBYTE)&pNtHdr->OptionalHeader + pNtHdr->FileHeader.SizeOfOptionalHeader);

    pNtHdr->FileHeader.NumberOfSections = 5;
    pNtHdr->OptionalHeader.AddressOfEntryPoint = m_newSecHdr[2].VirtualAddress;
    pNtHdr->OptionalHeader.SizeOfImage = m_newSecHdr[4].VirtualAddress + m_newSecHdr[4].Misc.VirtualSize;
    
    ZeroMemory(pNtHdr->OptionalHeader.DataDirectory, sizeof(pNtHdr->OptionalHeader.DataDirectory));
    CopyMemory(pSecHdr, m_newSecHdr, sizeof(m_newSecHdr));

    

}

bool CPacker::WriteNewPe(CString strNewPe)
{
    //创建文件
    HANDLE hFile = CreateFile(strNewPe,
        GENERIC_WRITE,
        0,
        NULL,
        CREATE_ALWAYS,
        FILE_ATTRIBUTE_NORMAL,
        NULL);

    //写入PE头
    DWORD dwBytesWrited = 0;
    WriteFile(hFile, m_pNewPeHdr, m_dwNewPeHdrSize, &dwBytesWrited, NULL);

    //写入数据节
    WriteFile(hFile, m_pComSec, m_dwComSecSize, &dwBytesWrited, NULL);

    //写入代码节
    WriteFile(hFile, m_pCodeSec, m_dwCodeSecSize, &dwBytesWrited, NULL);

    //写入存放表数据节
    WriteFile(hFile, m_pTableSec, m_dwTableSecSize, &dwBytesWrited, NULL);

    CloseHandle(hFile);

    return true;
}

bool CPacker::Pack(CString strSrc, CString strDst)
{
    //1.解析原PE
    if (!AnalyzePe(strSrc)) {

        return false;
    }

    //2.获取压缩数据
    if (!GetCompressData()) {

        return false;
    }

    //3.获取解压缩代码
    if (!GetCode()) {

        return false;
    }

    //获取要保存的表数据
    if (!GetTable()) {

        return false;
    }

    //4.合成新的PE
    //4.1压缩数据节
    GetComSec();

    //4.2壳代码节
    GetCodeSec();

    GetTableSec();

    //4.3构造节表
    GetNewSectionHeaders();

    //4.4构造PE头
    GetNewPeHdr();

    //5.写入文件
    if (!WriteNewPe(strDst)) {

        return false;
    }


    return true;
}

DWORD CPacker::GetAlign(DWORD dwValue, DWORD dwAlign)
{
    if (dwValue % dwAlign == 0) {

        return dwValue;
    }
    else {

        return (dwValue / dwAlign + 1) * dwAlign;
    }

}

bool CPacker::AnalyzePe(CString strSrc)
{
    m_hFile = CreateFile(
        strSrc,
        GENERIC_READ,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );

    m_dwSrcPeSize = GetFileSize(m_hFile, NULL);

    m_hFileMap = CreateFileMapping(
        m_hFile,
        NULL,
        PAGE_READONLY,
        0,
        0,
        NULL
    );

    m_pSrcPe = (LPBYTE)MapViewOfFile(m_hFileMap,
        FILE_MAP_READ,
        0,
        0,
        0);

    m_pDosHdr = (PIMAGE_DOS_HEADER)m_pSrcPe;
    m_pNtHdr = (PIMAGE_NT_HEADERS)(m_pSrcPe + m_pDosHdr->e_lfanew);
    m_pSecHdr = (PIMAGE_SECTION_HEADER)
        ((LPBYTE)&m_pNtHdr->OptionalHeader + m_pNtHdr->FileHeader.SizeOfOptionalHeader);

    
    
    return true;
}

bool CPacker::GetCompressData()
{
    COMPRESSOR_HANDLE hCompressor = NULL;
    BOOL Success = CreateCompressor(
        COMPRESS_ALGORITHM_XPRESS_HUFF,
        NULL,
        &hCompressor
    );

    m_pComData = new BYTE[m_dwSrcPeSize + 0x28];
    LPBYTE m_pSrcPeTmp = new BYTE[m_dwSrcPeSize];
    CopyMemory(m_pSrcPeTmp, m_pSrcPe, m_dwSrcPeSize);

    PIMAGE_DOS_HEADER m_pDosHdrTmp = (PIMAGE_DOS_HEADER)m_pSrcPeTmp;
    PIMAGE_NT_HEADERS m_pNtHdrTmp = (PIMAGE_NT_HEADERS)(m_pSrcPeTmp + m_pDosHdrTmp->e_lfanew);
    PIMAGE_SECTION_HEADER m_pSecHdrTmp = (PIMAGE_SECTION_HEADER)
        ((LPBYTE)&m_pNtHdrTmp->OptionalHeader + m_pNtHdrTmp->FileHeader.SizeOfOptionalHeader);

    //1.在压缩前，把节表保存并清空
    nSecNum = m_pNtHdrTmp->FileHeader.NumberOfSections;
    CopyMemory(m_pSaveSecHdr, m_pSecHdrTmp, nSecNum * 40);
    ZeroMemory(m_pSecHdrTmp, nSecNum * 40);

    //2.把导入表保存并清空
    m_pImportAddr = m_pNtHdrTmp->OptionalHeader.DataDirectory[1].VirtualAddress;
    nImpSize = m_pNtHdrTmp->OptionalHeader.DataDirectory[1].Size;
    ZeroMemory(&(m_pNtHdrTmp->OptionalHeader.DataDirectory[1]), 8);

    //3.把重定位表保存并清空
    m_pRelocAddr = m_pNtHdrTmp->OptionalHeader.DataDirectory[5].VirtualAddress;
    nRelocSize = m_pNtHdrTmp->OptionalHeader.DataDirectory[5].Size;
    ZeroMemory(&(m_pNtHdrTmp->OptionalHeader.DataDirectory[5]), 8);

    

    Success = Compress(
        hCompressor,
        m_pSrcPeTmp,
        m_dwSrcPeSize,
        m_pComData,
        m_dwSrcPeSize + 0x28,
        &m_dwComSize
    );


    return true;
}

unsigned char g_codedata[] = {
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x50, 0x8D, 0x45, 0xB0, 0x50, 0xE8, 0x21, 0x01, 0x00, 0x00, 0x83,
    0xC4, 0x04, 0xE8, 0xF9, 0x00, 0x00, 0x00, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0xF8, 0x89, 0x4D, 0xE8,
    0x8B, 0x55, 0xE8, 0x8B, 0x45, 0xF8, 0x03, 0x42, 0x3C, 0x89, 0x45, 0xF4, 0x8B, 0x4D, 0xF4, 0x0F,
    0xB7, 0x51, 0x14, 0x8B, 0x45, 0xF4, 0x8D, 0x4C, 0x10, 0x18, 0x89, 0x4D, 0xFC, 0xBA, 0x28, 0x00,
    0x00, 0x00, 0xC1, 0xE2, 0x00, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xF8, 0x03, 0x4C, 0x10, 0x0C, 0x89,
    0x4D, 0xDC, 0xBA, 0x28, 0x00, 0x00, 0x00, 0xC1, 0xE2, 0x00, 0x8B, 0x45, 0xFC, 0x8B, 0x4C, 0x10,
    0x18, 0x89, 0x4D, 0xE0, 0xBA, 0x28, 0x00, 0x00, 0x00, 0xC1, 0xE2, 0x00, 0x8B, 0x45, 0xFC, 0x8B,
    0x4C, 0x10, 0x1C, 0x89, 0x4D, 0xF0, 0x6A, 0x04, 0x68, 0x00, 0x10, 0x00, 0x00, 0x8B, 0x55, 0xF0,
    0x52, 0x6A, 0x00, 0xFF, 0x55, 0xC0, 0x89, 0x45, 0xEC, 0x8D, 0x45, 0xD8, 0x50, 0x6A, 0x00, 0x6A,
    0x04, 0xFF, 0x55, 0xB8, 0x89, 0x45, 0xD4, 0xC7, 0x45, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x4D,
    0xE4, 0x51, 0x8B, 0x55, 0xF0, 0x52, 0x8B, 0x45, 0xEC, 0x50, 0x8B, 0x4D, 0xE0, 0x51, 0x8B, 0x55,
    0xDC, 0x52, 0x8B, 0x45, 0xD8, 0x50, 0xFF, 0x55, 0xBC, 0x89, 0x45, 0xD4, 0xB9, 0x28, 0x00, 0x00,
    0x00, 0x6B, 0xD1, 0x03, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xF8, 0x03, 0x4C, 0x10, 0x0C, 0x89, 0x4D,
    0xCC, 0xBA, 0x28, 0x00, 0x00, 0x00, 0xC1, 0xE2, 0x02, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xF8, 0x03,
    0x4C, 0x10, 0x0C, 0x89, 0x4D, 0xD0, 0x8B, 0x55, 0xD0, 0x52, 0x8B, 0x45, 0xCC, 0x50, 0x8D, 0x4D,
    0xB0, 0x51, 0x8B, 0x55, 0xEC, 0x52, 0xE8, 0x25, 0x02, 0x00, 0x00, 0x83, 0xC4, 0x10, 0x89, 0x45,
    0xC8, 0xFF, 0x65, 0xC8, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x51, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x0C,
    0x8B, 0x40, 0x18, 0x89, 0x45, 0xFC, 0x8B, 0x45, 0xFC, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x70, 0x53, 0x56, 0x57, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B,
    0x40, 0x0C, 0x8B, 0x40, 0x0C, 0x8B, 0x00, 0x8B, 0x00, 0x8B, 0x40, 0x18, 0x89, 0x45, 0xFC, 0x8B,
    0x5D, 0xFC, 0xC7, 0x45, 0xB4, 0x47, 0x65, 0x74, 0x50, 0xC7, 0x45, 0xB8, 0x72, 0x6F, 0x63, 0x41,
    0xC7, 0x45, 0xBC, 0x64, 0x64, 0x72, 0x65, 0x8B, 0x43, 0x3C, 0x66, 0xC7, 0x45, 0xC0, 0x73, 0x73,
    0xC6, 0x45, 0xC2, 0x00, 0x8B, 0x54, 0x18, 0x78, 0x8B, 0x44, 0x1A, 0x24, 0x03, 0xD3, 0x03, 0xC3,
    0x89, 0x45, 0xF8, 0x8D, 0x45, 0xB4, 0x8B, 0x72, 0x1C, 0x8B, 0x7A, 0x20, 0x03, 0xF3, 0x03, 0xFB,
    0xA9, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x84, 0x61, 0x01, 0x00, 0x00, 0x8B, 0x52, 0x18, 0x33, 0xC9,
    0x85, 0xD2, 0x74, 0x6B, 0x8B, 0x04, 0x8F, 0x03, 0xC3, 0x80, 0x38, 0x47, 0x75, 0x5C, 0x80, 0x78,
    0x01, 0x65, 0x75, 0x56, 0x80, 0x78, 0x02, 0x74, 0x75, 0x50, 0x80, 0x78, 0x03, 0x50, 0x75, 0x4A,
    0x80, 0x78, 0x04, 0x72, 0x75, 0x44, 0x80, 0x78, 0x05, 0x6F, 0x75, 0x3E, 0x80, 0x78, 0x06, 0x63,
    0x75, 0x38, 0x80, 0x78, 0x07, 0x41, 0x75, 0x32, 0x80, 0x78, 0x08, 0x64, 0x75, 0x2C, 0x80, 0x78,
    0x09, 0x64, 0x75, 0x26, 0x80, 0x78, 0x0A, 0x72, 0x75, 0x20, 0x80, 0x78, 0x0B, 0x65, 0x75, 0x1A,
    0x80, 0x78, 0x0C, 0x73, 0x75, 0x14, 0x80, 0x78, 0x0D, 0x73, 0x75, 0x0E, 0x8B, 0x45, 0xF8, 0x0F,
    0xB7, 0x04, 0x48, 0x8B, 0x04, 0x86, 0x03, 0xC3, 0x75, 0x07, 0x41, 0x3B, 0xCA, 0x72, 0x95, 0x33,
    0xC0, 0x8B, 0x7D, 0x08, 0x8D, 0x4D, 0xD4, 0x51, 0x53, 0xC7, 0x45, 0xD4, 0x4C, 0x6F, 0x61, 0x64,
    0x89, 0x07, 0xC7, 0x45, 0xD8, 0x4C, 0x69, 0x62, 0x72, 0xC7, 0x45, 0xDC, 0x61, 0x72, 0x79, 0x41,
    0xC6, 0x45, 0xE0, 0x00, 0xFF, 0xD0, 0x8D, 0x4D, 0xF0, 0x89, 0x47, 0x04, 0x51, 0xC7, 0x45, 0xF0,
    0x43, 0x61, 0x62, 0x69, 0xC7, 0x45, 0xF4, 0x6E, 0x65, 0x74, 0x00, 0xFF, 0xD0, 0x8B, 0xF0, 0xC7,
    0x45, 0x90, 0x43, 0x72, 0x65, 0x61, 0x8D, 0x45, 0x90, 0xC7, 0x45, 0x94, 0x74, 0x65, 0x44, 0x65,
    0x50, 0x8B, 0x07, 0x56, 0xC7, 0x45, 0x98, 0x63, 0x6F, 0x6D, 0x70, 0xC7, 0x45, 0x9C, 0x72, 0x65,
    0x73, 0x73, 0x66, 0xC7, 0x45, 0xA0, 0x6F, 0x72, 0xC6, 0x45, 0xA2, 0x00, 0xFF, 0xD0, 0x89, 0x47,
    0x08, 0x8D, 0x45, 0xE4, 0x50, 0x8B, 0x07, 0x56, 0xC7, 0x45, 0xE4, 0x44, 0x65, 0x63, 0x6F, 0xC7,
    0x45, 0xE8, 0x6D, 0x70, 0x72, 0x65, 0x66, 0xC7, 0x45, 0xEC, 0x73, 0x73, 0xC6, 0x45, 0xEE, 0x00,
    0xFF, 0xD0, 0x89, 0x47, 0x0C, 0x8D, 0x45, 0xC4, 0x50, 0x8B, 0x07, 0x53, 0xC7, 0x45, 0xC4, 0x56,
    0x69, 0x72, 0x74, 0xC7, 0x45, 0xC8, 0x75, 0x61, 0x6C, 0x41, 0xC7, 0x45, 0xCC, 0x6C, 0x6C, 0x6F,
    0x63, 0xC6, 0x45, 0xD0, 0x00, 0xFF, 0xD0, 0x89, 0x47, 0x10, 0x8D, 0x45, 0xA4, 0x50, 0x8B, 0x07,
    0x53, 0xC7, 0x45, 0xA4, 0x56, 0x69, 0x72, 0x74, 0xC7, 0x45, 0xA8, 0x75, 0x61, 0x6C, 0x50, 0xC7,
    0x45, 0xAC, 0x72, 0x6F, 0x74, 0x65, 0x66, 0xC7, 0x45, 0xB0, 0x63, 0x74, 0xC6, 0x45, 0xB2, 0x00,
    0xFF, 0xD0, 0x89, 0x47, 0x14, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 0x8D, 0x45, 0xB4, 0x2B,
    0x42, 0x10, 0x8B, 0x04, 0x86, 0x85, 0xC0, 0x0F, 0x84, 0x02, 0xFF, 0xFF, 0xFF, 0x03, 0xC3, 0xE9,
    0xFD, 0xFE, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x3C, 0x8B, 0x45, 0x08, 0x8B, 0x4D, 0x10, 0x53, 0x56, 0x57, 0x8B,
    0x78, 0x3C, 0x8D, 0x51, 0x04, 0x03, 0xF8, 0x8B, 0x01, 0x89, 0x7D, 0xEC, 0x8D, 0x1C, 0x80, 0x0F,
    0xB7, 0x47, 0x14, 0xC1, 0xE3, 0x03, 0x8D, 0x77, 0x18, 0x8B, 0xCB, 0x03, 0xF0, 0x85, 0xC9, 0x74,
    0x10, 0x8A, 0x02, 0x8D, 0x76, 0x01, 0x88, 0x46, 0xFF, 0x8D, 0x52, 0x01, 0x83, 0xE9, 0x01, 0x75,
    0xF0, 0x8B, 0x4D, 0x10, 0x8D, 0x87, 0x80, 0x00, 0x00, 0x00, 0x83, 0xC1, 0x04, 0x89, 0x45, 0xE4,
    0x03, 0xCB, 0x8B, 0xF0, 0xBA, 0x04, 0x00, 0x00, 0x00, 0x2B, 0xF1, 0xEB, 0x03, 0x8D, 0x49, 0x00,
    0x8A, 0x01, 0x8D, 0x49, 0x01, 0x88, 0x44, 0x31, 0xFF, 0x83, 0xEA, 0x01, 0x75, 0xF2, 0x8B, 0x4D,
    0x10, 0x8B, 0xF7, 0x83, 0xC1, 0x08, 0xBA, 0x04, 0x00, 0x00, 0x00, 0x03, 0xCB, 0x2B, 0xF1, 0x90,
    0x8A, 0x01, 0x8D, 0x49, 0x01, 0x88, 0x84, 0x31, 0x83, 0x00, 0x00, 0x00, 0x83, 0xEA, 0x01, 0x75,
    0xEF, 0x8B, 0x4D, 0x10, 0x8D, 0x87, 0xA0, 0x00, 0x00, 0x00, 0x83, 0xC1, 0x0C, 0x89, 0x45, 0xE0,
    0x03, 0xCB, 0x8B, 0xF0, 0xBA, 0x04, 0x00, 0x00, 0x00, 0x2B, 0xF1, 0xEB, 0x03, 0x8D, 0x49, 0x00,
    0x8A, 0x01, 0x8D, 0x49, 0x01, 0x88, 0x44, 0x31, 0xFF, 0x83, 0xEA, 0x01, 0x75, 0xF2, 0x8B, 0x4D,
    0x10, 0x8D, 0x87, 0xA4, 0x00, 0x00, 0x00, 0x83, 0xC1, 0x10, 0x89, 0x45, 0xDC, 0x03, 0xCB, 0x8B,
    0xF0, 0xBA, 0x04, 0x00, 0x00, 0x00, 0x2B, 0xF1, 0xEB, 0x06, 0x8D, 0x9B, 0x00, 0x00, 0x00, 0x00,
    0x8A, 0x01, 0x8D, 0x49, 0x01, 0x88, 0x44, 0x0E, 0xFF, 0x83, 0xEA, 0x01, 0x75, 0xF2, 0x8B, 0x77,
    0x54, 0x64, 0xA1, 0x30, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x18,
    0x89, 0x45, 0xE8, 0x8B, 0x5D, 0xE8, 0x8B, 0xC3, 0x2B, 0x47, 0x34, 0x89, 0x45, 0xD8, 0x8B, 0x47,
    0x28, 0x03, 0xC3, 0x89, 0x5D, 0x10, 0x89, 0x45, 0xF0, 0x0F, 0xB7, 0x47, 0x06, 0x89, 0x45, 0xF4,
    0x0F, 0xB7, 0x47, 0x14, 0x03, 0xC7, 0x89, 0x45, 0xF8, 0x8D, 0x45, 0xFC, 0x50, 0x6A, 0x40, 0xFF,
    0x77, 0x54, 0x8B, 0x7D, 0x0C, 0x53, 0x8B, 0x47, 0x14, 0xFF, 0xD0, 0x8B, 0x45, 0x08, 0x8B, 0xC8,
    0x85, 0xF6, 0x74, 0x1A, 0x8B, 0xD3, 0x2B, 0xD0, 0xEB, 0x06, 0x8D, 0x9B, 0x00, 0x00, 0x00, 0x00,
    0x8A, 0x01, 0x8D, 0x49, 0x01, 0x88, 0x44, 0x0A, 0xFF, 0x83, 0xEE, 0x01, 0x75, 0xF2, 0x8D, 0x45,
    0xFC, 0x50, 0x8B, 0x45, 0xEC, 0xFF, 0x75, 0xFC, 0xFF, 0x70, 0x54, 0x8B, 0x47, 0x14, 0x53, 0xFF,
    0xD0, 0x83, 0x7D, 0xF4, 0x00, 0x76, 0x63, 0x8B, 0x45, 0xF8, 0x83, 0xC0, 0x28, 0x89, 0x45, 0xF8,
    0x8B, 0x78, 0xFC, 0x8D, 0x4D, 0xFC, 0x8B, 0x70, 0x04, 0x03, 0xFB, 0x03, 0x75, 0x08, 0x51, 0x6A,
    0x40, 0xFF, 0x30, 0x8B, 0x45, 0x0C, 0x57, 0x8B, 0x40, 0x14, 0xFF, 0xD0, 0x8B, 0x4D, 0xF8, 0x8B,
    0x09, 0x85, 0xC9, 0x74, 0x10, 0x2B, 0xFE, 0x8A, 0x06, 0x8D, 0x76, 0x01, 0x88, 0x44, 0x37, 0xFF,
    0x83, 0xE9, 0x01, 0x75, 0xF2, 0x8B, 0x7D, 0x0C, 0x8D, 0x45, 0xFC, 0x50, 0x8B, 0x45, 0xEC, 0xFF,
    0x75, 0xFC, 0xFF, 0x70, 0x54, 0x8B, 0x47, 0x14, 0x53, 0xFF, 0xD0, 0x8B, 0x45, 0xF8, 0x83, 0xC0,
    0x28, 0x83, 0x6D, 0xF4, 0x01, 0x89, 0x45, 0xF8, 0x75, 0xA6, 0x8B, 0x45, 0xE4, 0x8B, 0x00, 0x85,
    0xC0, 0x0F, 0x84, 0x3D, 0x01, 0x00, 0x00, 0x8D, 0x0C, 0x18, 0xC7, 0x45, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x89, 0x4D, 0xF4, 0x8D, 0x55, 0xC4, 0xBE, 0x10, 0x00, 0x00, 0x00, 0x8D, 0x64, 0x24, 0x00,
    0x8B, 0x01, 0x3B, 0x02, 0x75, 0x0F, 0x83, 0xC1, 0x04, 0x83, 0xC2, 0x04, 0x83, 0xEE, 0x04, 0x73,
    0xEF, 0x33, 0xC0, 0xEB, 0x25, 0x3A, 0x02, 0x75, 0x1C, 0x8A, 0x41, 0x01, 0x3A, 0x42, 0x01, 0x75,
    0x14, 0x8A, 0x41, 0x02, 0x3A, 0x42, 0x02, 0x75, 0x0C, 0x8A, 0x41, 0x03, 0x3A, 0x42, 0x03, 0x75,
    0x04, 0x33, 0xC0, 0xEB, 0x05, 0x1B, 0xC0, 0x83, 0xC8, 0x01, 0x85, 0xC0, 0x0F, 0x84, 0xE2, 0x00,
    0x00, 0x00, 0x8B, 0x75, 0xF4, 0x8B, 0x46, 0x0C, 0x85, 0xC0, 0x0F, 0x84, 0xD4, 0x00, 0x00, 0x00,
    0x83, 0x7E, 0x10, 0x00, 0x0F, 0x84, 0xCA, 0x00, 0x00, 0x00, 0x03, 0xC3, 0x50, 0x8B, 0x47, 0x04,
    0xFF, 0xD0, 0x8B, 0x7E, 0x10, 0x8B, 0x55, 0x10, 0x03, 0xFA, 0x89, 0x45, 0xEC, 0x8B, 0xDF, 0x8B,
    0x06, 0x85, 0xC0, 0x74, 0x03, 0x8D, 0x1C, 0x10, 0x8B, 0x03, 0x85, 0xC0, 0x74, 0x7B, 0x8B, 0x75,
    0x08, 0xC1, 0xE6, 0x04, 0x03, 0x75, 0x14, 0x8D, 0x4A, 0x02, 0x03, 0xC8, 0x80, 0x39, 0x5F, 0x75,
    0x39, 0x80, 0x7C, 0x10, 0x03, 0x61, 0x75, 0x32, 0x80, 0x7C, 0x10, 0x04, 0x63, 0x75, 0x2B, 0x80,
    0x7C, 0x10, 0x05, 0x6D, 0x75, 0x24, 0x80, 0x7C, 0x10, 0x06, 0x64, 0x75, 0x1D, 0x80, 0x7C, 0x10,
    0x07, 0x6C, 0x75, 0x16, 0x80, 0x7C, 0x10, 0x08, 0x6E, 0x75, 0x0F, 0x8B, 0x45, 0x0C, 0x51, 0xFF,
    0x75, 0xEC, 0x8B, 0x00, 0xFF, 0xD0, 0x89, 0x07, 0xEB, 0x17, 0x8B, 0x45, 0x0C, 0x51, 0xFF, 0x75,
    0xEC, 0x8B, 0x00, 0xFF, 0xD0, 0x89, 0x37, 0xC6, 0x06, 0x68, 0x89, 0x46, 0x01, 0xC6, 0x46, 0x05,
    0xC3, 0xFF, 0x45, 0x08, 0x83, 0xC3, 0x04, 0x8B, 0x55, 0x10, 0x83, 0xC7, 0x04, 0x83, 0xC6, 0x10,
    0x8B, 0x03, 0x85, 0xC0, 0x75, 0x91, 0x8B, 0x75, 0xF4, 0x83, 0xC6, 0x14, 0x8D, 0x55, 0xC4, 0x89,
    0x75, 0xF4, 0x8B, 0xCE, 0xBE, 0x10, 0x00, 0x00, 0x00, 0x8D, 0xA4, 0x24, 0x00, 0x00, 0x00, 0x00,
    0x8B, 0x01, 0x3B, 0x02, 0x75, 0x75, 0x83, 0xC1, 0x04, 0x83, 0xC2, 0x04, 0x83, 0xEE, 0x04, 0x73,
    0xEF, 0x8B, 0x5D, 0x10, 0x8B, 0x45, 0xE0, 0x8B, 0x00, 0x85, 0xC0, 0x74, 0x54, 0x8D, 0x14, 0x18,
    0x33, 0xFF, 0x8B, 0x45, 0xDC, 0x89, 0x7D, 0x0C, 0x8B, 0x00, 0x89, 0x45, 0x10, 0x85, 0xC0, 0x74,
    0x40, 0x8B, 0x72, 0x04, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x83, 0xEE, 0x08, 0xD1, 0xEE, 0x74, 0x24,
    0x8B, 0x7D, 0xD8, 0x0F, 0xB7, 0x44, 0x4A, 0x08, 0xA9, 0x00, 0x30, 0x00, 0x00, 0x74, 0x0A, 0x25,
    0xFF, 0x0F, 0x00, 0x00, 0x03, 0x02, 0x01, 0x3C, 0x18, 0x41, 0x3B, 0xCE, 0x7C, 0xE5, 0x8B, 0x7D,
    0x0C, 0x8B, 0x45, 0x10, 0x03, 0x7A, 0x04, 0x03, 0x52, 0x04, 0x89, 0x7D, 0x0C, 0x3B, 0xF8, 0x72,
    0xC0, 0x8B, 0x45, 0xF0, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 0x8B, 0x5D, 0x10, 0x8B, 0x7D,
    0x0C, 0xE9, 0xAC, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

bool CPacker::GetCode()
{

    m_dwCodeSize = sizeof(g_codedata);
    m_pCode = new BYTE[m_dwCodeSize];
    RtlCopyMemory(m_pCode, g_codedata, m_dwCodeSize);

    return true;
}

bool CPacker::GetTable()
{
    m_dwTableSize = nSecNum * 40 + 4 + 8 + 8;
    m_pTable = new BYTE[m_dwTableSize];
    RtlCopyMemory(m_pTable, &nSecNum, 4);
    RtlCopyMemory(m_pTable + 4, m_pSaveSecHdr, nSecNum * 40);
    RtlCopyMemory(m_pTable + 4 + nSecNum * 40, &m_pImportAddr, 4);
    RtlCopyMemory(m_pTable + 4 + nSecNum * 40 + 4, &nImpSize, 4);
    RtlCopyMemory(m_pTable + 4 + nSecNum * 40 + 4 + 4, &m_pRelocAddr, 4);
    RtlCopyMemory(m_pTable + 4 + nSecNum * 40 + 4 + 4 + 4, &nRelocSize, 4);

    return true;
}

void CPacker::GetComSec()
{
    //跟文件对齐值对齐
    m_dwComSecSize = GetAlign(m_dwComSize, m_pNtHdr->OptionalHeader.FileAlignment);
    m_pComSec = new BYTE[m_dwComSecSize];
    ZeroMemory(m_pComSec, m_dwComSecSize);

    //拷贝数据
    CopyMemory(m_pComSec, m_pComData, m_dwComSize);
}

void CPacker::GetCodeSec()
{
    //跟文件对齐值对齐
    m_dwCodeSecSize = GetAlign(m_dwCodeSize, m_pNtHdr->OptionalHeader.FileAlignment);
    m_pCodeSec = new BYTE[m_dwCodeSecSize];
    ZeroMemory(m_pCodeSec, m_dwCodeSecSize);

    //拷贝数据
    CopyMemory(m_pCodeSec, m_pCode, m_dwCodeSize);
}

void CPacker::GetTableSec()
{
    //跟文件对齐值对齐
    m_dwTableSecSize = GetAlign(m_dwTableSize, m_pNtHdr->OptionalHeader.FileAlignment);
    m_pTableSec = new BYTE[m_dwTableSecSize];
    ZeroMemory(m_pTableSec, m_dwTableSecSize);

    //拷贝数据
    CopyMemory(m_pTableSec, m_pTable, m_dwTableSize);
    
}

void CPacker::GetNewSectionHeaders()
{
    ZeroMemory(m_newSecHdr, sizeof(m_newSecHdr));

    //空节
    strcpy((char*)m_newSecHdr[0].Name, ".cr42");
    m_newSecHdr[0].Misc.VirtualSize = m_pNtHdr->OptionalHeader.SizeOfImage;
    m_newSecHdr[0].VirtualAddress = m_pSecHdr[0].VirtualAddress;
    m_newSecHdr[0].SizeOfRawData = 0;
    m_newSecHdr[0].PointerToRawData = 0;
    m_newSecHdr[0].Characteristics =
        IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_READ;

    //数据节
    strcpy((char*)m_newSecHdr[1].Name, ".data");
    m_newSecHdr[1].Misc.VirtualSize = GetAlign(m_dwComSecSize, m_pNtHdr->OptionalHeader.SectionAlignment);
    m_newSecHdr[1].VirtualAddress = m_newSecHdr[0].VirtualAddress + m_newSecHdr[0].Misc.VirtualSize;
    m_newSecHdr[1].SizeOfRawData = m_dwComSecSize;
    m_newSecHdr[1].PointerToRawData = m_pNtHdr->OptionalHeader.SizeOfHeaders;
    m_newSecHdr[1].Characteristics = IMAGE_SCN_MEM_READ;

    m_newSecHdr[1].PointerToRelocations = m_dwComSize; //压缩后大小
    m_newSecHdr[1].PointerToLinenumbers = m_dwSrcPeSize;//压缩前大小

    //代码节
    strcpy((char*)m_newSecHdr[2].Name, ".text");
    m_newSecHdr[2].Misc.VirtualSize = GetAlign(m_dwCodeSecSize, m_pNtHdr->OptionalHeader.SectionAlignment);
    m_newSecHdr[2].VirtualAddress = m_newSecHdr[1].VirtualAddress + m_newSecHdr[1].Misc.VirtualSize;
    m_newSecHdr[2].SizeOfRawData = m_dwCodeSecSize;
    m_newSecHdr[2].PointerToRawData = m_newSecHdr[1].PointerToRawData + m_newSecHdr[1].SizeOfRawData;
    m_newSecHdr[2].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_READ;

    //存放原节表、导入表、重定位表的节
    strcpy((char*)m_newSecHdr[3].Name, ".info");
    m_newSecHdr[3].Misc.VirtualSize = GetAlign(m_dwTableSecSize, m_pNtHdr->OptionalHeader.SectionAlignment);
    m_newSecHdr[3].VirtualAddress = m_newSecHdr[2].VirtualAddress + m_newSecHdr[2].Misc.VirtualSize;
    m_newSecHdr[3].SizeOfRawData = m_dwTableSecSize;
    m_newSecHdr[3].PointerToRawData = m_newSecHdr[2].PointerToRawData + m_newSecHdr[2].SizeOfRawData;
    m_newSecHdr[3].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_READ;

    //绕过x64搜索导入表的节(空节)
    strcpy((char*)m_newSecHdr[4].Name, ".imp");
    m_newSecHdr[4].Misc.VirtualSize = GetAlign(0x10000, m_pNtHdr->OptionalHeader.SectionAlignment);
    m_newSecHdr[4].VirtualAddress = m_newSecHdr[3].VirtualAddress + m_newSecHdr[3].Misc.VirtualSize;
    m_newSecHdr[4].SizeOfRawData = 0;
    m_newSecHdr[4].PointerToRawData = m_newSecHdr[3].PointerToRawData + m_newSecHdr[2].SizeOfRawData;
    m_newSecHdr[4].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_READ;



}
